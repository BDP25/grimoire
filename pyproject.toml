[project]
name = "grimoire"
version = "0.1.0"
description = "Add your description here"
license = { file = "LICENSE.md" }
readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    "esprima>=4.0.1",
    "google-genai>=1.4.0",
    "langchain-postgres>=0.0.13",
    "langchain[community,huggingface,google-genai]>=0.3.20",
    "psycopg[binary]>=3.2.6",
    "pydantic>=2.10.6",
    "sentence-transformers>=3.4.1",
    "torch>=2.6.0",
    "tree-sitter>=0.24.0",
    "tree-sitter-languages>=1.10.2",
    "typer>=0.15.2",
]

[dependency-groups]
dev = [
    "commitizen>=4.2.2",
    "coverage[toml]>=7.6.12",
    "mypy>=1.15.0",
    "poethepoet>=0.32.2",
    "pylint>=3.3.4",
    "pylint-junit>=0.3.5",
    "pytest>=8.3.4",
    "pytest-clarity>=1.0.1",
    "pytest-cov>=6.0.0",
    "pytest-deadfixtures>=2.2.1",
    "ruff>=0.9.8",
    "types-pyyaml>=6.0.12.20241230",
]

[project.scripts]
grim = "grimoire.main:cli"

[project.urls]
repository = "https://github.com/BDP25/grimoire"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe.tasks]
format = {shell = "ruff format && ruff check --fix"}
lint = {shell = "ruff check && pytest --dead-fixtures"}
types = {shell = "mypy ."}
test = {shell = "pytest"}
all = {shell = "poe format && poe lint && poe types && poe test && poe pylint"}

[tool.poe.tasks.pylint]
shell = "pylint -j 0 --recursive=y --output-format=${output_format} ${extra} ."
args = [
  { name = "output_format", options = ["--output-format"], default = "text" },
  { name = "extra", options = ["--extra"], default = "" }
]

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
exclude = [".venv/", "tests/", "conftest.py"]

[tool.pytest.ini_options]
addopts = "--cov . --cov-report term --cov-report html --cov-report xml --junitxml junit.xml"
filterwarnings = "ignore"
junit_family = "xunit2"

[tool.coverage.run]
omit = [".venv/*"]

[tool.ruff]
extend-exclude = ["**/migrations"]

[tool.ruff.lint]
extend-ignore = ["E501"]
select = [
  # pycodestyle
  "E",
  # Pyflakes
  "F",
  # pyupgrade
  "UP",
  # flake8-bugbear
  "B",
  # flake8-simplify
  "SIM",
  # isort
  "I",
]
